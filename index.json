{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Namespaces | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Namespaces Mawosoft.Extensions.BenchmarkDotNet TODO: Add description or change toc to link directly to Mawosoft.Extensions.BenchmarkDotNet.yml ."
  },
  "api/Mawosoft.Extensions.BenchmarkDotNet.BenchmarkRunInfos.html": {
    "href": "api/Mawosoft.Extensions.BenchmarkDotNet.BenchmarkRunInfos.html",
    "title": "Class BenchmarkRunInfos | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Class BenchmarkRunInfos A wrapper and extension for BenchmarkConverter , collecting the converted benchmarks, executing them, and optionally overriding any global and local Job configurations. As a minor benefit, BenchmarkRunInfos simplifies the use of BenchmarkConverter : You can store the global config to use in the Config property instead of passing it as an argument in each call to a conversion method. The results of all conversions are automatically collected and by calling RunAll() afterwards, you can execute them. BenchmarkRunInfos also provides two additional conversion methods for converting an entire Assembly and for converting methods by their name instead of their MethodInfo . However, the main purpose of BenchmarkRunInfos is the support of debugging scenarios: Specifying an OverrideJob will override all Job configurations, regardless whether they are defined globally or locally, as an explit, default or mutator job, via custom config or via attribute annotation. Even if your config contains multiple jobs or you have annotated your benchmark classes with multiple jobs (e.g. via [DryJob, ShortRunJob] or similar attributes), each converted benchmark method will only be executed with the override job. To achieve that, you don't have to change the coding of your configurations, just add a few extra statements to your Main method that will get executed under certain conditions. Note It may seem that instead of using BenchmarkRunInfos and OverrideJob in a debugging scenario, you could just create a different global config and set its UnionRule property to ConfigUnionRule.AlwaysUseGlobal . That however will have no effect at all , because BenchmarkDotNet always takes the UnionRule from the local config. Inheritance Object BenchmarkRunInfos Namespace : Mawosoft.Extensions.BenchmarkDotNet Assembly : Mawosoft.Extensions.BenchmarkDotNet.dll Syntax public class BenchmarkRunInfos : Object Examples public static void Main(string[] args) { // Your customized global config (Default used here for simplicity) ManualConfig config = ManualConfig.Create(DefaultConfig.Instance); if (Debugger.IsAttached && args.Length == 0) { // Debugging scenario BenchmarkRunInfos runInfos = new(); runInfos.Config = config .WithOption(ConfigOptions.DisableOptimizationsValidator, true); runInfos.OverrideJob = BenchmarkRunInfos.FastInProcessJob; // Pick only the methods you want to debug runInfos.ConvertMethodsToBenchmarks(typeof(MyClass1), \"Method1\", \"Method2\"); runInfos.ConvertMethodsToBenchmarks(typeof(MyClass2), \"Method3\"); runInfos.RunAll(); } else { // Regular scenario BenchmarkRunner.Run(typeof(Program).Assembly, config, args); } } Constructors BenchmarkRunInfos() Initializes a new instance of the BenchmarkRunInfos class. Declaration public BenchmarkRunInfos() BenchmarkRunInfos(IConfig, Job) Initializes a new instance of the BenchmarkRunInfos class with an optional global config and an optional override job. Declaration public BenchmarkRunInfos(IConfig globalConfig, Job overrideJob) Parameters Type Name Description IConfig globalConfig The global config to use for conversions, or null to use BenchmarkDotNet's default config. Job overrideJob The override job to use, or null to not use an override job at all. Remarks You can change the Config and OverrideJob properties at any time. This will not affect any benchmarks already converted, only subsequent benchmark conversions. The predefined FastInProcessJob is the best choice for debugging, but you can also define your own job if you prefer. Fields FastInProcessJob A predefined Job instance that can be used as override job. Declaration public static readonly Job FastInProcessJob Field Value Type Description Job The predefined Job instance. Remarks FastInProcessJob is equivalent to Job.Dry.WithToolchain(InProcessEmitToolchain.Instance) . Properties Config Gets or sets the global config to use for subsequent benchmark conversions. Declaration public IConfig Config { get; set; } Property Value Type Description IConfig The global config to use for conversions, or null to use BenchmarkDotNet's default config. Remarks You can change the Config property at any time. This will not affect any benchmarks already converted, only subsequent benchmark conversions. Count Gets the number of converted BenchmarkRunInfo elements. Declaration public int Count { get; } Property Value Type Description Int32 The number of converted benchmarks. Item[Int32] Gets the converted BenchmarkRunInfo element at the specified index. Declaration public BenchmarkRunInfo this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the element to get. Property Value Type Description BenchmarkRunInfo The element at the specified index. Items Gets a read-only collection of the converted benchmarks. Declaration public IReadOnlyList<BenchmarkRunInfo> Items { get; } Property Value Type Description IReadOnlyList < BenchmarkRunInfo > The read-only collection of the converted benchmarks. OverrideJob Gets or sets the override job to use for subsequent benchmark conversions. Declaration public Job OverrideJob { get; set; } Property Value Type Description Job The override job to use, or null to not use an override job at all. Remarks You can change the OverrideJob property at any time. This will not affect any benchmarks already converted, only subsequent benchmark conversions. The predefined FastInProcessJob is the best choice for debugging, but you can also define your own job if you prefer. Methods Add(BenchmarkRunInfo) Adds a BenchmarkRunInfo element and applies the OverrideJob if one is specified. Note Since BenchmarkRunInfo already contains converted benchmarks, an eventual Config will not be applied. Declaration public void Add(BenchmarkRunInfo benchmarkRunInfo) Parameters Type Name Description BenchmarkRunInfo benchmarkRunInfo The BenchmarkRunInfo element to be added. AddRange(IEnumerable<BenchmarkRunInfo>) Adds a collection of BenchmarkRunInfo elements and applies the OverrideJob if one is specified. Note Since BenchmarkRunInfo already contains converted benchmarks, an eventual Config will not be applied. Declaration public void AddRange(IEnumerable<BenchmarkRunInfo> benchmarkRunInfos) Parameters Type Name Description IEnumerable < BenchmarkRunInfo > benchmarkRunInfos The collection of BenchmarkRunInfo elements to be added. Clear(Boolean) Clears the list of BenchmarkRunInfo elements and optionally disposes them. Declaration public void Clear(bool dispose) Parameters Type Name Description Boolean dispose true to dispose all benchmarks, false to only remove them from the list without disposal. ConvertAssemblyToBenchmarks(Assembly) Converts all types with benchmarks in the given assembly and stores the results. An eventual Config and OverrideJob will be applied. Declaration public void ConvertAssemblyToBenchmarks(Assembly assembly) Parameters Type Name Description Assembly assembly The assembly containing the benchmark classes and methods. ConvertMethodsToBenchmarks(Type, MethodInfo[]) Converts the specified benchmark methods of the given type and stores the results. An eventual Config and OverrideJob will be applied. Declaration public void ConvertMethodsToBenchmarks(Type containingType, params MethodInfo[] benchmarkMethods) Parameters Type Name Description Type containingType The Type of the class containing the benchmark methods. MethodInfo [] benchmarkMethods An array of MethodInfo objects describing the benchmark methods. ConvertMethodsToBenchmarks(Type, String[]) Converts the named benchmark methods of the given type and stores the results. An eventual Config and OverrideJob will be applied. Note The method names must be unambigious, otherwise the conversion will fail. Declaration public void ConvertMethodsToBenchmarks(Type containingType, params string[] benchmarkMethodNames) Parameters Type Name Description Type containingType The Type of the class containing the benchmark methods. String [] benchmarkMethodNames An array of strings containing the names of the benchmark methods. ConvertSourceToBenchmarks(String) Compiles the given C# source code, converts the contained benchmark methods, and stores the results. An eventual Config and OverrideJob will be applied. Declaration public void ConvertSourceToBenchmarks(string source) Parameters Type Name Description String source A string containing the C# source code to compile. ConvertTypeToBenchmarks(Type) Converts all benchmark methods of the given type and stores the results. An eventual Config and OverrideJob will be applied. Declaration public void ConvertTypeToBenchmarks(Type type) Parameters Type Name Description Type type The Type of the class containing the benchmark methods. ConvertUrlToBenchmarks(String) Reads and compiles C# source code from the given Url, converts the contained benchmark methods, and stores the results. An eventual Config and OverrideJob will be applied. Declaration public void ConvertUrlToBenchmarks(string url) Parameters Type Name Description String url A string containing the Url to read the C# source code from. DebugUseDefaultOverrideJob() Sets the predefined override job ( FastInProcessJob ) when called from code compiled with the conditional DEBUG symbol defined. Declaration public void DebugUseDefaultOverrideJob() RunAll() Runs all converted benchmarks and returns the results. Declaration public Summary[] RunAll() Returns Type Description Summary [] An array of Summary objects containing the benchmark results. See Also BenchmarkRunInfos Sample on GitHub"
  },
  "api/Mawosoft.Extensions.BenchmarkDotNet.CombinedParamsColumn.html": {
    "href": "api/Mawosoft.Extensions.BenchmarkDotNet.CombinedParamsColumn.html",
    "title": "Class CombinedParamsColumn | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Class CombinedParamsColumn An alternative to DefaultColumnProviders.Params that displays all parameters in a single, customizable column. Inheritance Object CombinedParamsColumn Implements IColumn Namespace : Mawosoft.Extensions.BenchmarkDotNet Assembly : Mawosoft.Extensions.BenchmarkDotNet.dll Syntax public class CombinedParamsColumn : Object Constructors CombinedParamsColumn(String, String, String, String) Initializes a new instance of the CombinedParamsColumn class with optional custom formatting. Declaration public CombinedParamsColumn(string formatNameValue = \"{0}={1}\", string separator = \", \", string prefix = \"\", string suffix = \"\") Parameters Type Name Description String formatNameValue A composite format string where the format item {0} will be replaced with the parameter name and the format item {1} with the parameter value. The default is \"{0}={1}\" . String separator The string to use as a separator between multiple formatted parameters. The default is \", \" . String prefix The string to use before the first formatted parameter. The default is an empty string. String suffix The string to use after the last formatted parameter. The default is an empty string. Examples Use AddColumn() if you are building a config from scratch. ManualConfig config = ManualConfig.CreateEmpty() // Add the DefaultColumnProviders you need except DefaultColumnProviders.Params .AddColumnProvider(DefaultColumnProviders.Descriptor /* add more... */) // Add a new CombinedParamsColumn .AddColumn(new CombinedParamsColumn()); // Add other elements to the config... If you are modifying an existing config, use ReplaceColumnCategory() , one of the new config extension methods in this library. ManualConfig config = ManualConfig.Create(DefaultConfig.Instance) // Replace the default param columns with a new CombinedParamsColumn .ReplaceColumnCategory(new CombinedParamsColumn()); // Make other changes to the config... Change the formatting to display values only, separated by semicolon. new CombinedParamsColumn(\"{1}\", \"; \") Sample Output Default Formatting Custom Formatting BenchmarkDotNet Defaults // with CombinedParamsColumn() // default formatting Job=Dry Toolchain=InProcessEmitToolchain IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | Params | Mean | Error | |-------- |--------------------------------- |---------:|------:| | Method1 | fooArg=fooval1, barArg=barval1 | 382.9 μs | NA | | Method2 | fooArg=fooval1, bazArg=bazval1 | 255.3 μs | NA | | Method3 | fooArg=fooval1, buzzArg=buzzval1 | 255.8 μs | NA | | Method1 | fooArg=fooval2, barArg=barval2 | 262.6 μs | NA | | Method2 | fooArg=fooval2, bazArg=bazval2 | 268.5 μs | NA | | Method3 | fooArg=fooval2, buzzArg=buzzval2 | 256.6 μs | NA | Params : All parameter values Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval 1 μs : 1 Microsecond (0.000001 sec) // with CombinedParamsColumn(formatNameValue: \"{1}\", separator: \"; \") Job=Dry Toolchain=InProcessEmitToolchain IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | Params | Mean | Error | |-------- |------------------ |---------:|------:| | Method1 | fooval1; barval1 | 272.2 μs | NA | | Method2 | fooval1; bazval1 | 272.0 μs | NA | | Method3 | fooval1; buzzval1 | 280.2 μs | NA | | Method1 | fooval2; barval2 | 255.9 μs | NA | | Method2 | fooval2; bazval2 | 371.8 μs | NA | | Method3 | fooval2; buzzval2 | 267.3 μs | NA | Params : All parameter values Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval 1 μs : 1 Microsecond (0.000001 sec) // with BenchmarkDotNet defaults Job=Dry Toolchain=InProcessEmitToolchain IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | fooArg | barArg | bazArg | buzzArg | Mean | Error | |-------- |-------- |-------- |-------- |--------- |---------:|------:| | Method1 | fooval1 | barval1 | ? | ? | 410.8 μs | NA | | Method2 | fooval1 | ? | bazval1 | ? | 325.0 μs | NA | | Method3 | fooval1 | ? | ? | buzzval1 | 341.0 μs | NA | | Method1 | fooval2 | barval2 | ? | ? | 268.8 μs | NA | | Method2 | fooval2 | ? | bazval2 | ? | 310.9 μs | NA | | Method3 | fooval2 | ? | ? | buzzval2 | 414.2 μs | NA | fooArg : Value of the 'fooArg' parameter barArg : Value of the 'barArg' parameter bazArg : Value of the 'bazArg' parameter buzzArg : Value of the 'buzzArg' parameter Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval 1 μs : 1 Microsecond (0.000001 sec) See Also Column Display Samples on GitHub Properties AlwaysShow IColumn implementation. Declaration public bool AlwaysShow { get; } Property Value Type Description Boolean Category IColumn implementation. Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName IColumn implementation. Declaration public string ColumnName { get; } Property Value Type Description String Id IColumn implementation. Declaration public string Id { get; } Property Value Type Description String IsNumeric IColumn implementation. Declaration public bool IsNumeric { get; } Property Value Type Description Boolean Legend IColumn implementation. Declaration public string Legend { get; } Property Value Type Description String PriorityInCategory IColumn implementation. Declaration public int PriorityInCategory { get; } Property Value Type Description Int32 UnitType IColumn implementation. Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, BenchmarkCase) IColumn implementation. Declaration public string GetValue(Summary summary, BenchmarkCase benchmarkCase) Parameters Type Name Description Summary summary BenchmarkCase benchmarkCase Returns Type Description String GetValue(Summary, BenchmarkCase, SummaryStyle) IColumn implementation. Declaration public string GetValue(Summary summary, BenchmarkCase benchmarkCase, SummaryStyle style) Parameters Type Name Description Summary summary BenchmarkCase benchmarkCase SummaryStyle style Returns Type Description String IsAvailable(Summary) IColumn implementation. Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description Boolean IsDefault(Summary, BenchmarkCase) IColumn implementation. Declaration public bool IsDefault(Summary summary, BenchmarkCase benchmarkCase) Parameters Type Name Description Summary summary BenchmarkCase benchmarkCase Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Implements IColumn"
  },
  "api/Mawosoft.Extensions.BenchmarkDotNet.ConfigExtensions.html": {
    "href": "api/Mawosoft.Extensions.BenchmarkDotNet.ConfigExtensions.html",
    "title": "Class ConfigExtensions | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Class ConfigExtensions ManualConfig and IConfig extension methods for replacing parts of an existing config - for example, default columns with custom ones. When building a config in BenchmarkDotNet to run your benchmarks, there are essentially two ways of doing it: You can start from scratch with an empty config and most likely end up forgetting to add some essential item. You can use the predefined DefaultConfig.Instance and probably get some ingredients you don't have any use for, but which are hard to get rid of once they are part of the config. This is where these extensions come in handy. You can use the default config - or any other preexisting one - and replace parts of it. Don't like the default three exporters (HTML, CSV, GitHub Markdown) and prefer the leaner Console Markdown exporter? ManualConfig config = DefaultConfig.Instance.ReplaceExporters(MarkdownExporter.Console); Only want the statistical Mean column, not all the other ones, like StdDev and Error? ManualConfig config = DefaultConfig.Instance.ReplaceColumnCategory(StatisticColumn.Mean); Which of course leads to the custom columns that are part of this library: ManualConfig config = DefaultConfig.Instance.ReplaceColumnCategory( new JobColumnSelectionProvider(\"-run +runstrategy\"), new RecyclableParamsColumnProvider() ); Note When you use the extensions with a ManualConfig , that config is modified and returned. When you use the extensions with any other IConfig (as in the examples above), the source config remains untouched and a new instance of ManualConfig with the changes applied is returned. Inheritance Object ConfigExtensions Namespace : Mawosoft.Extensions.BenchmarkDotNet Assembly : Mawosoft.Extensions.BenchmarkDotNet.dll Syntax public static class ConfigExtensions : Object Methods RemoveColumnsByCategory(IConfig, ColumnCategory[]) Removes existing columns of the specified category or categories. Note In BenchmarkDotNet , the ColumnCategory.Job encompasses not only the real job characteristic columns, but also the method descriptor columns and the categories column . This method will not remove the latter two column types if the removal of ColumnCategory.Job is requested. Declaration public static ManualConfig RemoveColumnsByCategory(this IConfig config, params ColumnCategory[] categories) Parameters Type Name Description IConfig config The source config. ColumnCategory [] categories The column categories to remove. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. RemoveColumnsByCategory(ManualConfig, ColumnCategory[]) Removes existing columns of the specified category or categories. Note In BenchmarkDotNet , the ColumnCategory.Job encompasses not only the real job characteristic columns, but also the method descriptor columns and the categories column . This method will not remove the latter two column types if the removal of ColumnCategory.Job is requested. Declaration public static ManualConfig RemoveColumnsByCategory(this ManualConfig config, params ColumnCategory[] categories) Parameters Type Name Description ManualConfig config The config to be changed. ColumnCategory [] categories The column categories to remove. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceAnalysers(IConfig, IAnalyser[]) Replaces all analysers with the given new ones. Declaration public static ManualConfig ReplaceAnalysers(this IConfig config, params IAnalyser[] newAnalysers) Parameters Type Name Description IConfig config The source config. IAnalyser [] newAnalysers The new analyzers to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceAnalysers(ManualConfig, IAnalyser[]) Replaces all analyzers with the given new ones. Declaration public static ManualConfig ReplaceAnalysers(this ManualConfig config, params IAnalyser[] newAnalysers) Parameters Type Name Description ManualConfig config The config to be changed. IAnalyser [] newAnalysers The new analyzers to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceColumnCategory(IConfig, IColumn[]) Replaces existing columns belonging to the same category or categories as newColumns with the given new ones. Declaration public static ManualConfig ReplaceColumnCategory(this IConfig config, params IColumn[] newColumns) Parameters Type Name Description IConfig config The source config. IColumn [] newColumns The new columns to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceColumnCategory(IConfig, IColumnProvider[]) Replaces existing columns belonging to the same category or categories as newColumnProviders with the given new ones. Declaration public static ManualConfig ReplaceColumnCategory(this IConfig config, params IColumnProvider[] newColumnProviders) Parameters Type Name Description IConfig config The source config. IColumnProvider [] newColumnProviders The new column providers to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceColumnCategory(ManualConfig, IColumn[]) Replaces existing columns belonging to the same category or categories as newColumns with the given new ones. Declaration public static ManualConfig ReplaceColumnCategory(this ManualConfig config, params IColumn[] newColumns) Parameters Type Name Description ManualConfig config The config to be changed. IColumn [] newColumns The new columns to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceColumnCategory(ManualConfig, IColumnProvider[]) Replaces existing columns belonging to the same category or categories as newColumnProviders with the given new ones. Declaration public static ManualConfig ReplaceColumnCategory(this ManualConfig config, params IColumnProvider[] newColumnProviders) Parameters Type Name Description ManualConfig config The config to be changed. IColumnProvider [] newColumnProviders The new column providers to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceDiagnosers(IConfig, IDiagnoser[]) Replaces all diagnosers with the given new ones. Declaration public static ManualConfig ReplaceDiagnosers(this IConfig config, params IDiagnoser[] newDiagnosers) Parameters Type Name Description IConfig config The source config. IDiagnoser [] newDiagnosers The new diagnosers to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceDiagnosers(ManualConfig, IDiagnoser[]) Replaces all diagnosers with the given new ones. Declaration public static ManualConfig ReplaceDiagnosers(this ManualConfig config, params IDiagnoser[] newDiagnosers) Parameters Type Name Description ManualConfig config The config to be changed. IDiagnoser [] newDiagnosers The new diagnosers to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceExporters(IConfig, IExporter[]) Replaces all exporters with the given new ones. Declaration public static ManualConfig ReplaceExporters(this IConfig config, params IExporter[] newExporters) Parameters Type Name Description IConfig config The source config. IExporter [] newExporters The new exporters to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceExporters(ManualConfig, IExporter[]) Replaces all exporters with the given new ones. Declaration public static ManualConfig ReplaceExporters(this ManualConfig config, params IExporter[] newExporters) Parameters Type Name Description ManualConfig config The config to be changed. IExporter [] newExporters The new exporters to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceFilters(IConfig, IFilter[]) Replaces all filters with the given new ones. Declaration public static ManualConfig ReplaceFilters(this IConfig config, params IFilter[] newFilters) Parameters Type Name Description IConfig config The source config. IFilter [] newFilters The new filters to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceFilters(ManualConfig, IFilter[]) Replaces all filters with the given new ones. Declaration public static ManualConfig ReplaceFilters(this ManualConfig config, params IFilter[] newFilters) Parameters Type Name Description ManualConfig config The config to be changed. IFilter [] newFilters The new filters to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceHardwareCounters(IConfig, HardwareCounter[]) Replaces all hardware counters with the given new ones. Declaration public static ManualConfig ReplaceHardwareCounters(this IConfig config, params HardwareCounter[] newHardwareCounters) Parameters Type Name Description IConfig config The source config. HardwareCounter [] newHardwareCounters The new hardware counters to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceHardwareCounters(ManualConfig, HardwareCounter[]) Replaces all hardware counters with the given new ones. Declaration public static ManualConfig ReplaceHardwareCounters(this ManualConfig config, params HardwareCounter[] newHardwareCounters) Parameters Type Name Description ManualConfig config The config to be changed. HardwareCounter [] newHardwareCounters The new hardware counters to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceJobs(IConfig, Job[]) Replaces all jobs with the given new ones. Declaration public static ManualConfig ReplaceJobs(this IConfig config, params Job[] newJobs) Parameters Type Name Description IConfig config The source config. Job [] newJobs The new jobs to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceJobs(ManualConfig, Job[]) Replaces all jobs with the given new ones. Declaration public static ManualConfig ReplaceJobs(this ManualConfig config, params Job[] newJobs) Parameters Type Name Description ManualConfig config The config to be changed. Job [] newJobs The new jobs to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceLoggers(IConfig, ILogger[]) Replaces all loggers with the given new ones. Declaration public static ManualConfig ReplaceLoggers(this IConfig config, params ILogger[] newLoggers) Parameters Type Name Description IConfig config The source config. ILogger [] newLoggers The new loggers to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceLoggers(ManualConfig, ILogger[]) Replaces all loggers with the given new ones. Declaration public static ManualConfig ReplaceLoggers(this ManualConfig config, params ILogger[] newLoggers) Parameters Type Name Description ManualConfig config The config to be changed. ILogger [] newLoggers The new loggers to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceLogicalGroupRules(IConfig, BenchmarkLogicalGroupRule[]) Replaces all logical group rules with the given new ones. Declaration public static ManualConfig ReplaceLogicalGroupRules(this IConfig config, params BenchmarkLogicalGroupRule[] newLogicalGroupRules) Parameters Type Name Description IConfig config The source config. BenchmarkLogicalGroupRule [] newLogicalGroupRules The new logical group rules to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceLogicalGroupRules(ManualConfig, BenchmarkLogicalGroupRule[]) Replaces all logical group rules with the given new ones. Declaration public static ManualConfig ReplaceLogicalGroupRules(this ManualConfig config, params BenchmarkLogicalGroupRule[] newLogicalGroupRules) Parameters Type Name Description ManualConfig config The config to be changed. BenchmarkLogicalGroupRule [] newLogicalGroupRules The new logical group rules to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. ReplaceValidators(IConfig, IValidator[]) Replaces all validators with the given new ones. Declaration public static ManualConfig ReplaceValidators(this IConfig config, params IValidator[] newValidators) Parameters Type Name Description IConfig config The source config. IValidator [] newValidators The new validators to be added. Returns Type Description ManualConfig A new instance of ManualConfig with changes applied. ReplaceValidators(ManualConfig, IValidator[]) Replaces all validators with the given new ones. Declaration public static ManualConfig ReplaceValidators(this ManualConfig config, params IValidator[] newValidators) Parameters Type Name Description ManualConfig config The config to be changed. IValidator [] newValidators The new validators to be added. Returns Type Description ManualConfig The existing ManualConfig with changes applied. See Also Config Extension Samples and Column Display Samples on GitHub"
  },
  "api/Mawosoft.Extensions.BenchmarkDotNet.html": {
    "href": "api/Mawosoft.Extensions.BenchmarkDotNet.html",
    "title": "Namespace Mawosoft.Extensions.BenchmarkDotNet | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Namespace Mawosoft.Extensions.BenchmarkDotNet Classes BenchmarkRunInfos A wrapper and extension for BenchmarkConverter , collecting the converted benchmarks, executing them, and optionally overriding any global and local Job configurations. CombinedParamsColumn An alternative to DefaultColumnProviders.Params that displays all parameters in a single, customizable column. ConfigExtensions ManualConfig and IConfig extension methods for replacing parts of an existing config - for example, default columns with custom ones. JobColumnSelectionProvider An alternative to DefaultColumnProviders.Job , with a user-defined selection of Job columns. ParamWrapper<T> A generic wrapper to associate strongly typed parameter or argument values with a display text. RecyclableParamsColumnProvider An alternative to DefaultColumnProviders.Params that displays parameters in recyclable columns corresponding to parameter position rather than name. WhatifFilter An alternative to BenchmarkDotNet's --list command line option that prints a mock summary of all available benchmarks according to the current effective BenchmarkDotNet configuration."
  },
  "api/Mawosoft.Extensions.BenchmarkDotNet.JobColumnSelectionProvider.html": {
    "href": "api/Mawosoft.Extensions.BenchmarkDotNet.JobColumnSelectionProvider.html",
    "title": "Class JobColumnSelectionProvider | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Class JobColumnSelectionProvider An alternative to DefaultColumnProviders.Job , with a user-defined selection of Job columns. Inheritance Object JobColumnSelectionProvider Implements IColumnProvider Namespace : Mawosoft.Extensions.BenchmarkDotNet Assembly : Mawosoft.Extensions.BenchmarkDotNet.dll Syntax public class JobColumnSelectionProvider : Object Constructors JobColumnSelectionProvider(String, Boolean) Initializes a new instance of the JobColumnSelectionProvider class. Declaration public JobColumnSelectionProvider(string filterExpression, bool showHiddenValuesInLegend = true) Parameters Type Name Description String filterExpression A space-separated list of job column or category names, prefixed with - or + to exclude or include them. See remarks for details. Boolean showHiddenValuesInLegend true to include a compact display of hidden values as legend, false if not. The default is true . Remarks The filter expressions are processed sequentially. Initially, all columns are visible, just as with the default provider. The filter \"-All +Job\" will first hide all job columns and then unhide the Job name column. \"-Run +RunStrategy\" will hide the columns of the Run category and then unhide the RunStrategy column. Each job column represents a job characteristic. Characteristics are grouped into categories, which can be specified either by their name or by their type, e.g. Run and RunMode are equivalent. Available categories are: Environment , Gc , Run , Infrastructure , Accuracy . For more details about them, see the BenchmarkDotNet documentation . In addition, the alias All refers to all columns, and both Job and Id can be used for the Job name colum. All column and category names are case-insensitive. Examples Use AddColumnProvider() if you are building a config from scratch. ManualConfig config = ManualConfig.CreateEmpty() // Add the DefaultColumnProviders you need except DefaultColumnProviders.Job .AddColumnProvider(DefaultColumnProviders.Descriptor /* add more... */) // Add a new JobColumnSelectionProvider that will show only the job name // and use the legend for hidden, non-common values. .AddColumnProvider(new JobColumnSelectionProvider(\"-all +Job\", true)); // Add other elements to the config... If you are modifying an existing config, use ReplaceColumnCategory() , one of the new config extension methods in this library. ManualConfig config = ManualConfig.Create(DefaultConfig.Instance) // Replace the default job columns with a new JobColumnSelectionProvider .ReplaceColumnCategory(new JobColumnSelectionProvider(\"-all +Job\", true)); // Make other changes to the config... If you run otherwise identical jobs with different target frameworks, you can remove redundant columns and don't need their values to be displayed in the legend. new JobColumnSelectionProvider(\"-Job -Toolchain\", showHiddenValuesInLegend: false) Sample Output - Jobs with different Run characteristics \"-all +Job\" BenchmarkDotNet Defaults // with JobColumnSelectionProvider(\"-all +Job\", showHiddenValuesInLegend: true) Toolchain=InProcessEmitToolchain | Method | Job | Mean | Error | StdDev | |-------- |----------- |-----------:|----------:|----------:| | Method1 | Job-QYOJAY | 1.700 μs | 0.0100 μs | 0.0094 μs | | Method2 | Job-QYOJAY | 1.688 μs | 0.0100 μs | 0.0094 μs | | Method1 | Dry | 241.300 μs | NA | 0.0000 μs | | Method2 | Dry | 203.100 μs | NA | 0.0000 μs | Job : Job name. Some job columns have been hidden: Job-QYOJAY: IterationCount=Default, LaunchCount=Default, RunStrategy=Default, UnrollFactor=16, WarmupCount=Default Dry: IterationCount=1, LaunchCount=1, RunStrategy=ColdStart, UnrollFactor=1, WarmupCount=1 Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements 1 μs : 1 Microsecond (0.000001 sec) // with BenchmarkDotNet defaults Toolchain=InProcessEmitToolchain | Method | Job | IterationCount | LaunchCount | RunStrategy | UnrollFactor | WarmupCount | Mean | Error | StdDev | |-------- |----------- |--------------- |------------ |------------ |------------- |------------ |-----------:|----------:|----------:| | Method1 | Job-QYOJAY | Default | Default | Default | 16 | Default | 1.701 μs | 0.0221 μs | 0.0206 μs | | Method2 | Job-QYOJAY | Default | Default | Default | 16 | Default | 1.689 μs | 0.0075 μs | 0.0063 μs | | Method1 | Dry | 1 | 1 | ColdStart | 1 | 1 | 255.200 μs | NA | 0.0000 μs | | Method2 | Dry | 1 | 1 | ColdStart | 1 | 1 | 239.700 μs | NA | 0.0000 μs | Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements 1 μs : 1 Microsecond (0.000001 sec) - Jobs with different target frameworks \"-Job -Toolchain\" BenchmarkDotNet Defaults // with JobColumnSelectionProvider(\"-Job -Toolchain\", showHiddenValuesInLegend: false) IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | Runtime | Mean | Error | Ratio | |-------- |------------------- |---------:|------:|------:| | Method1 | .NET 5.0 | 435.8 μs | NA | 1.28 | | Method1 | .NET Core 3.1 | 328.7 μs | NA | 0.96 | | Method1 | .NET Framework 4.8 | 340.7 μs | NA | 1.00 | | | | | | | | Method2 | .NET 5.0 | 385.9 μs | NA | 1.15 | | Method2 | .NET Core 3.1 | 451.9 μs | NA | 1.34 | | Method2 | .NET Framework 4.8 | 336.2 μs | NA | 1.00 | Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval Ratio : Mean of the ratio distribution ([Current]/[Baseline]) 1 μs : 1 Microsecond (0.000001 sec) // with BenchmarkDotNet defaults IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | Job | Runtime | Toolchain | Mean | Error | Ratio | |-------- |----------- |------------------- |-------------- |---------:|------:|------:| | Method1 | Job-YMVNBK | .NET 5.0 | net5.0 | 358.1 μs | NA | 1.05 | | Method1 | Job-QHJRYG | .NET Core 3.1 | netcoreapp3.1 | 350.5 μs | NA | 1.02 | | Method1 | Job-BDEBJQ | .NET Framework 4.8 | net48 | 342.4 μs | NA | 1.00 | | | | | | | | | | Method2 | Job-YMVNBK | .NET 5.0 | net5.0 | 332.9 μs | NA | 0.65 | | Method2 | Job-QHJRYG | .NET Core 3.1 | netcoreapp3.1 | 332.5 μs | NA | 0.65 | | Method2 | Job-BDEBJQ | .NET Framework 4.8 | net48 | 512.5 μs | NA | 1.00 | Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval Ratio : Mean of the ratio distribution ([Current]/[Baseline]) 1 μs : 1 Microsecond (0.000001 sec) See Also Column Display Samples on GitHub Methods GetColumns(Summary) IColumnProvider implementation. Declaration public IEnumerable<IColumn> GetColumns(Summary summary) Parameters Type Name Description Summary summary Returns Type Description IEnumerable < IColumn > Implements IColumnProvider"
  },
  "api/Mawosoft.Extensions.BenchmarkDotNet.ParamWrapper-1.html": {
    "href": "api/Mawosoft.Extensions.BenchmarkDotNet.ParamWrapper-1.html",
    "title": "Class ParamWrapper<T> | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Class ParamWrapper<T> A generic wrapper to associate strongly typed parameter or argument values with a display text. Inheritance Object ParamWrapper<T> Implements IDisposable Namespace : Mawosoft.Extensions.BenchmarkDotNet Assembly : Mawosoft.Extensions.BenchmarkDotNet.dll Syntax public class ParamWrapper<T> : Object Type Parameters Name Description T The type of the wrapped value. Examples public IEnumerable<MemoryStream> ArgumentsSource_NotWrapped() { yield return new MemoryStream(50); yield return new MemoryStream(500); } public IEnumerable<ParamWrapper<MemoryStream>> ArgumentsSource_Wrapped() { yield return new ParamWrapper<MemoryStream>(new MemoryStream(50), \"small stream\"); yield return new ParamWrapper<MemoryStream>(new MemoryStream(500), \"big stream\"); } [Benchmark] [ArgumentsSource(nameof(ArgumentsSource_NotWrapped))] public void NotWrapped(MemoryStream input) { input.Seek(0, SeekOrigin.Begin); byte[] buffer = new byte[10]; while (input.Read(buffer, 0, buffer.Length) == buffer.Length) { } } [Benchmark] [ArgumentsSource(nameof(ArgumentsSource_Wrapped))] public void Wrapped(ParamWrapper<MemoryStream> input) { MemoryStream stream = input.Value; stream.Seek(0, SeekOrigin.Begin); byte[] buffer = new byte[10]; while (stream.Read(buffer, 0, buffer.Length) == buffer.Length) { } } Sample Output // *** ParamWrapper Sample *** Job=Dry Toolchain=InProcessEmitToolchain IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | input | Mean | Error | |----------- |----------------------- |---------:|------:| | NotWrapped | System.IO.MemoryStream | 452.0 μs | NA | | NotWrapped | System.IO.MemoryStream | 203.7 μs | NA | | Wrapped | big stream | 449.4 μs | NA | | Wrapped | small stream | 213.8 μs | NA | input : Value of the 'input' parameter Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval 1 μs : 1 Microsecond (0.000001 sec) Constructors ParamWrapper(T, String) Initializes a new instance of the ParamWrapper<T> class with the given strongly typed value and display text. Declaration public ParamWrapper(T value, string displayText) Parameters Type Name Description T value The parameter or argument value to wrap. String displayText The associated text to display in logs and summaries. Fields DisplayText The associated text to display in logs and summaries. Declaration public string DisplayText Field Value Type Description String Value The strongly typed parameter or argument value. Declaration public T Value Field Value Type Description T Methods Dispose() Disposes the wrapped value if it implements IDisposable . Declaration public void Dispose() ToString() Returns a string that represents the wrapped value. Declaration public override string ToString() Returns Type Description String Implements System.IDisposable See Also Column Display Samples on GitHub"
  },
  "api/Mawosoft.Extensions.BenchmarkDotNet.RecyclableParamsColumnProvider.html": {
    "href": "api/Mawosoft.Extensions.BenchmarkDotNet.RecyclableParamsColumnProvider.html",
    "title": "Class RecyclableParamsColumnProvider | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Class RecyclableParamsColumnProvider An alternative to DefaultColumnProviders.Params that displays parameters in recyclable columns corresponding to parameter position rather than name. Inheritance Object RecyclableParamsColumnProvider Implements IColumnProvider Namespace : Mawosoft.Extensions.BenchmarkDotNet Assembly : Mawosoft.Extensions.BenchmarkDotNet.dll Syntax public class RecyclableParamsColumnProvider : Object Constructors RecyclableParamsColumnProvider(Boolean, String) Initializes a new instance of the RecyclableParamsColumnProvider class. Declaration public RecyclableParamsColumnProvider(bool tryKeepParamName = true, string genericName = \"Param\") Parameters Type Name Description Boolean tryKeepParamName If true and if all parameters at a position have the same name, that name will be used as column header. Otherwise, a generic, numbered column header will be used. The default is true . String genericName Prefix for the generic, numbered column header. The default is \"Param\" . Examples Use AddColumnProvider() if you are building a config from scratch. ManualConfig config = ManualConfig.CreateEmpty() // Add the DefaultColumnProviders you need except DefaultColumnProviders.Params .AddColumnProvider(DefaultColumnProviders.Descriptor /* add more... */) // Add a new RecyclableParamsColumnProvider .AddColumnProvider(new RecyclableParamsColumnProvider()); // Add other elements to the config... If you are modifying an existing config, use ReplaceColumnCategory() , one of the new config extension methods in this library. ManualConfig config = ManualConfig.Create(DefaultConfig.Instance) // Replace the default param columns with a new RecyclableParamsColumnProvider .ReplaceColumnCategory(new RecyclableParamsColumnProvider()); // Make other changes to the config... Sample Output Default Settings Custom Settings BenchmarkDotNet Defaults // with RecyclableParamsColumnProvider() // default settings Job=Dry Toolchain=InProcessEmitToolchain IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | fooArg | Param2 | Mean | Error | |-------- |-------- |--------- |---------:|------:| | Method1 | fooval1 | barval1 | 244.4 μs | NA | | Method2 | fooval1 | bazval1 | 223.3 μs | NA | | Method3 | fooval1 | buzzval1 | 238.0 μs | NA | | Method1 | fooval2 | barval2 | 329.4 μs | NA | | Method2 | fooval2 | bazval2 | 209.0 μs | NA | | Method3 | fooval2 | buzzval2 | 238.0 μs | NA | fooArg : Value of the 'fooArg' parameter Param2 : Value of the parameter at position 2 Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval 1 μs : 1 Microsecond (0.000001 sec) // with RecyclableParamsColumnProvider(tryKeepParamName: false) Job=Dry Toolchain=InProcessEmitToolchain IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | Param1 | Param2 | Mean | Error | |-------- |-------- |--------- |---------:|------:| | Method1 | fooval1 | barval1 | 270.3 μs | NA | | Method2 | fooval1 | bazval1 | 318.1 μs | NA | | Method3 | fooval1 | buzzval1 | 278.5 μs | NA | | Method1 | fooval2 | barval2 | 258.6 μs | NA | | Method2 | fooval2 | bazval2 | 318.4 μs | NA | | Method3 | fooval2 | buzzval2 | 304.9 μs | NA | Param1 : Value of the parameter at position 1 Param2 : Value of the parameter at position 2 Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval 1 μs : 1 Microsecond (0.000001 sec) // with BenchmarkDotNet defaults Job=Dry Toolchain=InProcessEmitToolchain IterationCount=1 LaunchCount=1 RunStrategy=ColdStart UnrollFactor=1 WarmupCount=1 | Method | fooArg | barArg | bazArg | buzzArg | Mean | Error | |-------- |-------- |-------- |-------- |--------- |---------:|------:| | Method1 | fooval1 | barval1 | ? | ? | 410.8 μs | NA | | Method2 | fooval1 | ? | bazval1 | ? | 325.0 μs | NA | | Method3 | fooval1 | ? | ? | buzzval1 | 341.0 μs | NA | | Method1 | fooval2 | barval2 | ? | ? | 268.8 μs | NA | | Method2 | fooval2 | ? | bazval2 | ? | 310.9 μs | NA | | Method3 | fooval2 | ? | ? | buzzval2 | 414.2 μs | NA | fooArg : Value of the 'fooArg' parameter barArg : Value of the 'barArg' parameter bazArg : Value of the 'bazArg' parameter buzzArg : Value of the 'buzzArg' parameter Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval 1 μs : 1 Microsecond (0.000001 sec) See Also Column Display Samples on GitHub Methods GetColumns(Summary) IColumnProvider implementation. Declaration public IEnumerable<IColumn> GetColumns(Summary summary) Parameters Type Name Description Summary summary Returns Type Description IEnumerable < IColumn > Implements IColumnProvider"
  },
  "api/Mawosoft.Extensions.BenchmarkDotNet.WhatifFilter.html": {
    "href": "api/Mawosoft.Extensions.BenchmarkDotNet.WhatifFilter.html",
    "title": "Class WhatifFilter | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Class WhatifFilter An alternative to BenchmarkDotNet's --list command line option that prints a mock summary of all available benchmarks according to the current effective BenchmarkDotNet configuration. A configuration is the interplay of console arguments, global and local configs, and attributes. The WhatifFilter can be controlled either programmatically via the Enabled property, or by using the --whatif option (short: -w ) on the command line and passing the console arguments through PreparseConsoleArguments() . If enabled, the filter will collect all benchmark cases created by BenchmarkRunner , BenchmarkSwitcher , or BenchmarkConverter and suppress their execution. The properties FilteredBenchmarkCases and FilteredBenchmarkRunInfos provide access to the collected benchmarks, while PrintAsSummaries() outputs them to the console or another logger. Inheritance Object WhatifFilter Implements IFilter Namespace : Mawosoft.Extensions.BenchmarkDotNet Assembly : Mawosoft.Extensions.BenchmarkDotNet.dll Syntax public class WhatifFilter : Object Examples public static void Main(string[] args) { // Create the WhatifFilter and let it process the --whatif argument if one exists. WhatifFilter whatifFilter = new(); args = whatifFilter.PreparseConsoleArguments(args); // Create a global confing and add the filter (DefaultConfig used for simplicity). ManualConfig config = DefaultConfig.Instance.AddFilter(whatifFilter); // Run the benchmarks as you would normally do. If the filter was enabled, // execution has been supressed and the returned array will be empty. Summary[] summaries = BenchmarkRunner.Run(typeof(Program).Assembly, config, args); // Check the filter and print the What-if summaries if (whatifFilter.Enabled) { whatifFilter.PrintAsSummaries(ConsoleLogger.Default); whatifFilter.Clear(dispose: true); } } Sample Output --whatif --list flat --list tree // * What If Summary * Console arguments: --runtimes net5.0 netcoreapp31 net48 --whatif BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19042.1237 (20H2/October2020Update), VM=VirtualBox AMD Ryzen 5 3400G with Radeon Vega Graphics, 1 CPU, 4 logical and 4 physical cores .NET SDK=5.0.401 [Host] : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT // Benchmarks1 IterationCount=3 LaunchCount=1 WarmupCount=3 | Method | Job | Runtime | Toolchain | Mean | Error | Ratio | |-------- |----------- |------------------- |------------- |---------:|------:|------:| | Method1 | Job-PFBCDR | .NET 5.0 | net5.0 | 102.0 ms | NA | 1.00 | | Method2 | Job-PFBCDR | .NET 5.0 | net5.0 | 105.0 ms | NA | 1.03 | | Method3 | Job-PFBCDR | .NET 5.0 | net5.0 | 108.0 ms | NA | 1.06 | | Method1 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | 100.0 ms | NA | 0.98 | | Method2 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | 103.0 ms | NA | 1.01 | | Method3 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | 106.0 ms | NA | 1.04 | | Method1 | Job-LLNYBD | .NET Framework 4.8 | net48 | 101.0 ms | NA | 0.99 | | Method2 | Job-LLNYBD | .NET Framework 4.8 | net48 | 104.0 ms | NA | 1.02 | | Method3 | Job-LLNYBD | .NET Framework 4.8 | net48 | 107.0 ms | NA | 1.05 | // Benchmarks2 IterationCount=3 LaunchCount=1 WarmupCount=3 | Method | Job | Runtime | Toolchain | Prop1 | next | Mean | Error | Ratio | |-------- |----------- |------------------- |------------- |------ |----- |---------:|------:|------:| | Method3 | Job-PFBCDR | .NET 5.0 | net5.0 | False | 44 | 125.0 ms | NA | 1.00 | | Method3 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | False | 44 | 121.0 ms | NA | 0.97 | | Method3 | Job-LLNYBD | .NET Framework 4.8 | net48 | False | 44 | 123.0 ms | NA | 0.98 | | | | | | | | | | | | Method1 | Job-PFBCDR | .NET 5.0 | net5.0 | False | ? | 113.0 ms | NA | 1.00 | | Method1 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | False | ? | 109.0 ms | NA | 0.96 | | Method1 | Job-LLNYBD | .NET Framework 4.8 | net48 | False | ? | 111.0 ms | NA | 0.98 | | | | | | | | | | | | Method2 | Job-PFBCDR | .NET 5.0 | net5.0 | False | ? | 119.0 ms | NA | 1.00 | | Method2 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | False | ? | 115.0 ms | NA | 0.97 | | Method2 | Job-LLNYBD | .NET Framework 4.8 | net48 | False | ? | 117.0 ms | NA | 0.98 | | | | | | | | | | | | Method3 | Job-PFBCDR | .NET 5.0 | net5.0 | True | 44 | 126.0 ms | NA | 1.00 | | Method3 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | True | 44 | 122.0 ms | NA | 0.97 | | Method3 | Job-LLNYBD | .NET Framework 4.8 | net48 | True | 44 | 124.0 ms | NA | 0.98 | | | | | | | | | | | | Method1 | Job-PFBCDR | .NET 5.0 | net5.0 | True | ? | 114.0 ms | NA | 1.00 | | Method1 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | True | ? | 110.0 ms | NA | 0.96 | | Method1 | Job-LLNYBD | .NET Framework 4.8 | net48 | True | ? | 112.0 ms | NA | 0.98 | | | | | | | | | | | | Method2 | Job-PFBCDR | .NET 5.0 | net5.0 | True | ? | 120.0 ms | NA | 1.00 | | Method2 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | True | ? | 116.0 ms | NA | 0.97 | | Method2 | Job-LLNYBD | .NET Framework 4.8 | net48 | True | ? | 118.0 ms | NA | 0.98 | // Benchmarks3 LaunchCount=1 | Method | Job | Runtime | Toolchain | IterationCount | RunStrategy | UnrollFactor | WarmupCount | Mean | Error | Ratio | |-------- |----------- |------------------- |------------- |--------------- |------------ |------------- |------------ |---------:|------:|------:| | Method1 | Job-PFBCDR | .NET 5.0 | net5.0 | 3 | Default | 16 | 3 | 129.0 ms | NA | 1.00 | | Method1 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | 3 | Default | 16 | 3 | 127.0 ms | NA | 0.98 | | Method1 | Job-LLNYBD | .NET Framework 4.8 | net48 | 3 | Default | 16 | 3 | 128.0 ms | NA | 0.99 | | Method1 | Dry | .NET 5.0 | Default | 1 | ColdStart | 1 | 1 | 130.0 ms | NA | 1.01 | | | | | | | | | | | | | | Method2 | Job-PFBCDR | .NET 5.0 | net5.0 | 3 | Default | 16 | 3 | 133.0 ms | NA | 1.00 | | Method2 | Job-GTPATI | .NET Core 3.1 | netcoreapp31 | 3 | Default | 16 | 3 | 131.0 ms | NA | 0.98 | | Method2 | Job-LLNYBD | .NET Framework 4.8 | net48 | 3 | Default | 16 | 3 | 132.0 ms | NA | 0.99 | | Method2 | Dry | .NET 5.0 | Default | 1 | ColdStart | 1 | 1 | 134.0 ms | NA | 1.01 | Console arguments: --runtimes net5.0 netcoreapp31 net48 --list flat WhatifFilterSample.Benchmarks1.Method1 WhatifFilterSample.Benchmarks1.Method2 WhatifFilterSample.Benchmarks1.Method3 WhatifFilterSample.Benchmarks2.Method3 WhatifFilterSample.Benchmarks2.Method1 WhatifFilterSample.Benchmarks2.Method2 WhatifFilterSample.Benchmarks3.Method1 WhatifFilterSample.Benchmarks3.Method2 Console arguments: --runtimes net5.0 netcoreapp31 net48 --list tree WhatifFilterSample ├─Benchmarks1 │ ├─Method1 │ ├─Method2 │ └─Method3 ├─Benchmarks2 │ ├─Method3 │ ├─Method1 │ └─Method2 └─Benchmarks3 ├─Method1 └─Method2 Constructors WhatifFilter() Declaration public WhatifFilter() Properties Enabled Gets or sets the filter's Enabled state. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean If true , the filter will collect all benchmark cases created by BenchmarkRunner or related classes, and suppress their execution. If false , the filter is disabled and will not have any effect. FilteredBenchmarkCases Gets an enumerable collection of the filtered, individual benchmark cases. Declaration public IEnumerable<BenchmarkCase> FilteredBenchmarkCases { get; } Property Value Type Description IEnumerable < BenchmarkCase > The collection of the filtered, individual benchmark cases. FilteredBenchmarkRunInfos Gets an enumerable collection of the filtered benchmark cases grouped by containing type. Declaration public IEnumerable<BenchmarkRunInfo> FilteredBenchmarkRunInfos { get; } Property Value Type Description IEnumerable < BenchmarkRunInfo > The collection of the filtered, grouped benchmark cases. Methods Clear(Boolean) Clears the list of collected benchmark cases and optionally disposes them. Declaration public void Clear(bool dispose) Parameters Type Name Description Boolean dispose true to dispose all benchmarks, false to only remove them from the list without disposal. Predicate(BenchmarkCase) IFilter implementation. Declaration public bool Predicate(BenchmarkCase benchmarkCase) Parameters Type Name Description BenchmarkCase benchmarkCase Returns Type Description Boolean PreparseConsoleArguments(String[]) Preparses the console arguments for the option --whatif (short: -w ) and automatically enables the filter if the option is present. Declaration public string[] PreparseConsoleArguments(string[] args) Parameters Type Name Description String [] args The array of console arguments as passed to the Main method of the application. Returns Type Description String [] The passed in array of console arguments with the --whatif option removed. PrintAsSummaries(ILogger) Prints the collected benchmark cases as summaries to the given logger. Declaration public void PrintAsSummaries(ILogger logger) Parameters Type Name Description ILogger logger The logger to use for printing the summaries. Implements IFilter See Also What-If Filter Sample on GitHub"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Introduction TODO: Add intro."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Mawosoft Extensions for BenchmarkDotNet",
    "keywords": "Mawosoft Extensions for BenchmarkDotNet API Doc GitHub NuGet"
  }
}